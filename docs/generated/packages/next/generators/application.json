{
  "name": "application",
  "factory": "./src/generators/application/application#applicationGeneratorInternal",
  "schema": {
    "$schema": "https://json-schema.org/schema",
    "cli": "nx",
    "$id": "NxNextApp",
    "title": "Create a Next.js Application for Nx",
    "description": "Create a Next.js Application for Nx.",
    "type": "object",
    "properties": {
      "name": {
        "description": "The name of the application.",
        "type": "string",
        "$default": { "$source": "argv", "index": 0 },
        "x-prompt": "What name would you like to use for the application?",
        "pattern": "^[a-zA-Z][^:]*$",
        "x-priority": "important"
      },
      "directory": {
        "description": "The directory of the new application.",
        "type": "string",
        "alias": "dir",
        "x-priority": "important"
      },
      "projectNameAndRootFormat": {
        "description": "Whether to generate the project name and root directory as provided (`as-provided`) or generate them composing their values and taking the configured layout into account (`derived`).",
        "type": "string",
        "enum": ["as-provided", "derived"]
      },
      "style": {
        "description": "The file extension to be used for style files.",
        "type": "string",
        "default": "css",
        "alias": "s",
        "x-prompt": {
          "message": "Which stylesheet format would you like to use?",
          "type": "list",
          "items": [
            { "value": "css", "label": "CSS" },
            {
              "value": "scss",
              "label": "SASS(.scss)       [ https://sass-lang.com          ]"
            },
            {
              "value": "less",
              "label": "LESS              [ https://lesscss.org            ]"
            },
            {
              "value": "tailwind",
              "label": "tailwind          [ https://tailwindcss.com/       ]"
            },
            {
              "value": "styled-components",
              "label": "styled-components [ https://styled-components.com ]"
            },
            {
              "value": "@emotion/styled",
              "label": "emotion           [ https://emotion.sh            ]"
            },
            {
              "value": "styled-jsx",
              "label": "styled-jsx        [ https://www.npmjs.com/package/styled-jsx ]"
            },
            { "value": "none", "label": "None" }
          ]
        }
      },
      "linter": {
        "description": "The tool to use for running lint checks.",
        "type": "string",
        "enum": ["eslint"],
        "default": "eslint"
      },
      "skipFormat": {
        "description": "Skip formatting files.",
        "type": "boolean",
        "default": false,
        "x-priority": "internal"
      },
      "unitTestRunner": {
        "type": "string",
        "enum": ["jest", "none"],
        "description": "Test runner to use for unit tests.",
        "default": "jest"
      },
      "e2eTestRunner": {
        "type": "string",
        "enum": ["playwright", "cypress", "none"],
        "description": "Test runner to use for end to end (E2E) tests.",
        "x-prompt": "Which E2E test runner would you like to use?",
        "default": "playwright"
      },
      "tags": {
        "type": "string",
        "description": "Add tags to the application (used for linting).",
        "alias": "t"
      },
      "js": {
        "type": "boolean",
        "description": "Generate JavaScript files rather than TypeScript files.",
        "default": false
      },
      "setParserOptionsProject": {
        "type": "boolean",
        "description": "Whether or not to configure the ESLint `parserOptions.project` option. We do not do this by default for lint performance reasons.",
        "default": false
      },
      "swc": {
        "description": "Enable the Rust-based compiler SWC to compile JS/TS files.",
        "type": "boolean",
        "default": true
      },
      "customServer": {
        "description": "Use a custom Express server for the Next.js application.",
        "type": "boolean",
        "default": false
      },
      "skipPackageJson": {
        "type": "boolean",
        "default": false,
        "description": "Do not add dependencies to `package.json`.",
        "x-priority": "internal"
      },
      "appDir": {
        "type": "boolean",
        "default": true,
        "description": "Enable the App Router for this project.",
        "x-prompt": "Would you like to use the App Router (recommended)?"
      },
      "src": {
        "type": "boolean",
        "default": true,
        "description": "Generate a `src` directory for the project.",
        "x-prompt": "Would you like to use `src/` directory?"
      },
      "rootProject": {
        "description": "Create an application at the root of the workspace.",
        "type": "boolean",
        "default": false,
        "hidden": true,
        "x-priority": "internal"
      }
    },
    "required": [],
    "examplesFile": "## Examples\n\n{% tabs %}\n{% tab label=\"Create app in a directory\" %}\n\n{% callout type=\"note\" title=\"Directory Flag Behavior Changes\" %}\nThe command below uses the `as-provided` directory flag behavior, which is the default in Nx 16.8.0. If you're on an earlier version of Nx or using the `derived` option, use `--directory=nested`. See the [as-provided vs. derived documentation](/deprecated/as-provided-vs-derived) for more details.\n{% /callout %}\n\n```shell\nnx g app myapp --directory=apps/nested/myapp\n```\n\n{% /tab %}\n{% tab label=\"Use a custom Express server\" %}\n\n```shell\nnx g app myapp --custom-server\n```\n\n{% /tab %}\n{% tab label=\"Use plain JavaScript (not TypeScript)\" %}\n\n```shell\nnx g app myapp --js\n```\n\n{% /tab %}\n{% /tabs %}\n",
    "presets": []
  },
  "aliases": ["app"],
  "x-type": "application",
  "description": "Create an application.",
  "implementation": "/packages/next/src/generators/application/application#applicationGeneratorInternal.ts",
  "hidden": false,
  "path": "/packages/next/src/generators/application/schema.json",
  "type": "generator"
}
