// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`lib --publishable should add build targets 1`] = `
"/// <reference types='vitest' />
import { defineConfig } from 'vite';
import vue from '@vitejs/plugin-vue';
import dts from 'vite-plugin-dts';
import * as path from 'path';
import { nxViteTsPaths } from '@nx/vite/plugins/nx-tsconfig-paths.plugin';

export default defineConfig({
  root: __dirname,
  cacheDir: '../node_modules/.vite/my-lib',

  plugins: [
    vue(),
    nxViteTsPaths(),
    dts({
      entryRoot: 'src',
      tsconfigPath: path.join(__dirname, 'tsconfig.lib.json'),
    }),
  ],

  // Uncomment this if you are using workers.
  // worker: {
  //  plugins: [ nxViteTsPaths() ],
  // },

  // Configuration for building your library.
  // See: https://vitejs.dev/guide/build.html#library-mode
  build: {
    outDir: '../dist/my-lib',
    emptyOutDir: true,
    reportCompressedSize: true,
    commonjsOptions: {
      transformMixedEsModules: true,
    },
    lib: {
      // Could also be a dictionary or array of multiple entry points.
      entry: 'src/index.ts',
      name: 'my-lib',
      fileName: 'index',
      // Change this to the formats you want to support.
      // Don't forget to update your package.json as well.
      formats: ['es', 'cjs'],
    },
    rollupOptions: {
      // External packages that should not be bundled into your library.
      external: [],
    },
  },

  test: {
    watch: false,
    globals: true,
    cache: {
      dir: '../node_modules/.vitest/my-lib',
    },
    environment: 'jsdom',
    include: ['src/**/*.{test,spec}.{js,mjs,cjs,ts,mts,cts,jsx,tsx}'],

    reporters: ['default'],
    coverage: {
      reportsDirectory: '../coverage/my-lib',
      provider: 'v8',
    },
  },
});
"
`;

exports[`lib --unit-test-runner none should not generate test configuration 1`] = `null`;

exports[`lib nested should create a local tsconfig.json 1`] = `
{
  "compilerOptions": {
    "allowJs": true,
    "allowSyntheticDefaultImports": true,
    "esModuleInterop": false,
    "jsx": "preserve",
    "jsxImportSource": "vue",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "strict": true,
  },
  "extends": "../../tsconfig.base.json",
  "files": [],
  "include": [],
  "references": [
    {
      "path": "./tsconfig.lib.json",
    },
    {
      "path": "./tsconfig.spec.json",
    },
  ],
}
`;

exports[`lib should add vite types to tsconfigs and generate correct vite.config.ts file 1`] = `
"/// <reference types='vitest' />
import { defineConfig } from 'vite';
import vue from '@vitejs/plugin-vue';
import dts from 'vite-plugin-dts';
import * as path from 'path';
import { nxViteTsPaths } from '@nx/vite/plugins/nx-tsconfig-paths.plugin';

export default defineConfig({
  root: __dirname,
  cacheDir: '../node_modules/.vite/my-lib',

  plugins: [
    vue(),
    nxViteTsPaths(),
    dts({
      entryRoot: 'src',
      tsconfigPath: path.join(__dirname, 'tsconfig.lib.json'),
    }),
  ],

  // Uncomment this if you are using workers.
  // worker: {
  //  plugins: [ nxViteTsPaths() ],
  // },

  // Configuration for building your library.
  // See: https://vitejs.dev/guide/build.html#library-mode
  build: {
    outDir: '../dist/my-lib',
    emptyOutDir: true,
    reportCompressedSize: true,
    commonjsOptions: {
      transformMixedEsModules: true,
    },
    lib: {
      // Could also be a dictionary or array of multiple entry points.
      entry: 'src/index.ts',
      name: 'my-lib',
      fileName: 'index',
      // Change this to the formats you want to support.
      // Don't forget to update your package.json as well.
      formats: ['es', 'cjs'],
    },
    rollupOptions: {
      // External packages that should not be bundled into your library.
      external: [],
    },
  },

  test: {
    watch: false,
    globals: true,
    cache: {
      dir: '../node_modules/.vitest/my-lib',
    },
    environment: 'jsdom',
    include: ['src/**/*.{test,spec}.{js,mjs,cjs,ts,mts,cts,jsx,tsx}'],

    reporters: ['default'],
    coverage: {
      reportsDirectory: '../coverage/my-lib',
      provider: 'v8',
    },
  },
});
"
`;

exports[`lib should add vue, vite and vitest to package.json 1`] = `
{
  "dependencies": {
    "vue": "^3.3.4",
  },
  "devDependencies": {
    "@nx/cypress": "0.0.1",
    "@nx/eslint": "0.0.1",
    "@nx/eslint-plugin": "0.0.1",
    "@nx/js": "0.0.1",
    "@nx/rollup": "0.0.1",
    "@nx/vite": "0.0.1",
    "@nx/vue": "0.0.1",
    "@nx/web": "0.0.1",
    "@swc-node/register": "~1.9.1",
    "@swc/core": "~1.5.7",
    "@swc/helpers": "~0.5.11",
    "@typescript-eslint/eslint-plugin": "^7.3.0",
    "@typescript-eslint/parser": "^7.3.0",
    "@vitejs/plugin-vue": "^4.5.0",
    "@vitest/coverage-v8": "^1.0.4",
    "@vitest/ui": "^1.3.1",
    "@vue/eslint-config-prettier": "7.1.0",
    "@vue/eslint-config-typescript": "^11.0.3",
    "@vue/test-utils": "^2.4.1",
    "eslint": "~8.57.0",
    "eslint-config-prettier": "^9.0.0",
    "eslint-plugin-vue": "^9.16.1",
    "jsdom": "~22.1.0",
    "prettier": "^2.6.2",
    "typescript": "~5.4.2",
    "vite": "^5.0.0",
    "vitest": "^1.3.1",
    "vue-tsc": "^1.8.8",
  },
  "name": "@proj/source",
}
`;

exports[`lib should add vue, vite and vitest to package.json 2`] = `
"{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "outDir": "../dist/out-tsc",
    "types": ["vite/client"]
  },
  "exclude": [
    "src/**/__tests__/*",
    "src/**/*.spec.ts",
    "src/**/*.test.ts",
    "src/**/*.spec.tsx",
    "src/**/*.test.tsx",
    "src/**/*.spec.js",
    "src/**/*.test.js",
    "src/**/*.spec.jsx",
    "src/**/*.test.jsx",
    "src/**/*.spec.vue",
    "src/**/*.test.vue"
  ],
  "include": [
    "src/**/*.js",
    "src/**/*.jsx",
    "src/**/*.ts",
    "src/**/*.tsx",
    "src/**/*.vue"
  ]
}
"
`;

exports[`lib should generate files 1`] = `
{
  "extends": [
    "plugin:vue/vue3-essential",
    "eslint:recommended",
    "@vue/eslint-config-typescript",
    "@vue/eslint-config-prettier/skip-formatting",
    "../.eslintrc.json",
  ],
  "ignorePatterns": [
    "!**/*",
  ],
  "overrides": [
    {
      "files": [
        "*.ts",
        "*.tsx",
        "*.js",
        "*.jsx",
        "*.vue",
      ],
      "rules": {
        "vue/multi-word-component-names": "off",
      },
    },
  ],
}
`;

exports[`lib should ignore test files in tsconfig.lib.json 1`] = `
[
  "src/**/__tests__/*",
  "src/**/*.spec.ts",
  "src/**/*.test.ts",
  "src/**/*.spec.tsx",
  "src/**/*.test.tsx",
  "src/**/*.spec.js",
  "src/**/*.test.js",
  "src/**/*.spec.jsx",
  "src/**/*.test.jsx",
  "src/**/*.spec.vue",
  "src/**/*.test.vue",
]
`;

exports[`lib should support eslint flat config 1`] = `
"const { FlatCompat } = require('@eslint/eslintrc');
const js = require('@eslint/js');
const baseConfig = require('../eslint.config.js');

const compat = new FlatCompat({
  baseDirectory: __dirname,
  recommendedConfig: js.configs.recommended,
});

module.exports = [
  ...compat.extends(
    'plugin:vue/vue3-essential',
    'eslint:recommended',
    '@vue/eslint-config-typescript',
    '@vue/eslint-config-prettier/skip-formatting'
  ),
  ...baseConfig,
  {
    files: ['**/*.ts', '**/*.tsx', '**/*.js', '**/*.jsx', '**/*.vue'],
    rules: { 'vue/multi-word-component-names': 'off' },
  },
];
"
`;
